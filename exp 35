
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_BLOCKS 100
#define MAX_FILES 10
#define MAX_FILE_BLOCKS 10

int disk[MAX_BLOCKS]; // 0 = free, 1 = allocated

typedef struct {
    char name[20];
    int index_block;
    int blocks[MAX_FILE_BLOCKS];
    int block_count;
} File;

File files[MAX_FILES];
int file_count = 0;

int allocate_block() {
    for (int i = 0; i < MAX_BLOCKS; i++) {
        if (disk[i] == 0) {
            disk[i] = 1;
            return i;
        }
    }
    return -1; // No free block
}

void create_file() {
    if (file_count >= MAX_FILES) {
        printf("File limit reached.\n");
        return;
    }

    char fname[20];
    int count;

    printf("Enter file name: ");
    scanf("%s", fname);

    printf("Enter number of blocks needed: ");
    scanf("%d", &count);

    if (count <= 0 || count > MAX_FILE_BLOCKS) {
        printf("Invalid block count.\n");
        return;
    }

    // Allocate index block
    int index_block = allocate_block();
    if (index_block == -1) {
        printf("No free space for index block.\n");
        return;
    }

    // Allocate data blocks
    int blocks[MAX_FILE_BLOCKS];
    for (int i = 0; i < count; i++) {
        blocks[i] = allocate_block();
        if (blocks[i] == -1) {
            printf("Disk full! Could not allocate all blocks.\n");
            disk[index_block] = 0; // free index block

            for (int j = 0; j < i; j++) {
                disk[blocks[j]] = 0; // free allocated data blocks
            }

            return;
        }
    }

    // Save file info
    strcpy(files[file_count].name, fname);
    files[file_count].index_block = index_block;
    files[file_count].block_count = count;
    for (int i = 0; i < count; i++) {
        files[file_count].blocks[i] = blocks[i];
    }
    file_count++;

    printf("File '%s' created successfully. Index block: %d\n", fname, index_block);
}

void display_files() {
    if (file_count == 0) {
        printf("No files created.\n");
        return;
    }

    for (int i = 0; i < file_count; i++) {
        printf("\nFile: %s\n", files[i].name);
        printf("Index Block: %d\n", files[i].index_block);
        printf("Data Blocks: ");
        for (int j = 0; j < files[i].block_count; j++) {
            printf("%d ", files[i].blocks[j]);
        }
        printf("\n");
    }
}

int main() {
    int choice;

    while (1) {
        printf("\n--- Indexed Allocation Simulation ---\n");
        printf("1. Create File\n");
        printf("2. Display Files\n");
        printf("3. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                create_file();
                break;
            case 2:
                display_files();
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
