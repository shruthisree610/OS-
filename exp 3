#include <stdio.h>

struct Process {
    int pid;            // Process ID
    int burst_time;     // CPU Burst Time
    int waiting_time;   // Waiting Time
    int turnaround_time; // Turnaround Time
};

void calculateWaitingTime(struct Process p[], int n) {
    p[0].waiting_time = 0;

    for (int i = 1; i < n; i++) {
        p[i].waiting_time = p[i-1].waiting_time + p[i-1].burst_time;
    }
}

void calculateTurnaroundTime(struct Process p[], int n) {
    for (int i = 0; i < n; i++) {
        p[i].turnaround_time = p[i].burst_time + p[i].waiting_time;
    }
}

void printProcessTable(struct Process p[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;

    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_waiting_time += p[i].waiting_time;
        total_turnaround_time += p[i].turnaround_time;

        printf("P%d\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Burst Time for Process P%d: ", p[i].pid);
        scanf("%d", &p[i].burst_time);
    }

    calculateWaitingTime(p, n);
    calculateTurnaroundTime(p, n);
    printProcessTable(p, n);

    return 0;
}
